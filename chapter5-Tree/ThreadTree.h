//// Created by zhang zhiqiang on 2021/9/20.//#ifndef DATASTRUCTURE_THREADTREE_H#define DATASTRUCTURE_THREADTREE_H/*线索二叉树（利用n+1个空闲指针记录其前驱和后继结点的位置）*///线索二叉树结点typedef  struct ThreadNode{    char data;    struct  ThreadNode *lchild,*rchild;    int ltag,rtag; // tag=0：指针指向孩子；tag=1：指针指向"线索"}  *ThreadTree;ThreadNode *pre= nullptr;//全局变量pre，指向当前访问结点的前驱//对给定线索二叉树结点进行线索化void visit(ThreadNode *q){    if(q->lchild== nullptr){//左子树为空，建立前驱线索        q->lchild=pre;        q->ltag=1;    }    if(pre!= nullptr && pre->rchild== nullptr){        pre->rchild=q;//建立前驱结点的后继线索        pre->rtag=1;    }    pre=q;}//中序遍历二叉树，一边遍历，一边线索化void InThread(ThreadTree tree){    if(tree!=nullptr){        InThread(tree->lchild);//中序遍历左子树        visit(tree);//访问根结点        InThread(tree->rchild);//中序遍历右子树    }}//中序线索化二叉树Tvoid CreateInThread(ThreadTree T){    pre= nullptr; //pre初始为null    if(T!= nullptr){ //非空二叉树才能线索化        InThread(T); //中序线索化二叉树        if(pre->rchild== nullptr){            pre->rtag=1;//处理遍历的最后一个结点        }    }}#endif //DATASTRUCTURE_THREADTREE_H